OOPS:

#OOPs concept: the main concept of oops is to bind
Data and function that work on that together as a 
Single unit so that no other part of the code can 
Access the data. 

#Why OOPs:

OOPs model:

-Class = A specific car model, such as Audi A4,
 BMW I8, Maruti Suzuki Vitara Brezza, etc.
-Object = A specific car of any model, like the 
car you own
-Characteristics = What is the color of your car? 
What is the Chassis number of your car? etc
-Behavior = How to start the car? How to change 
the gear of the car? etc.
Characteristics are also known as data, attributes
, or properties, and Behaviours are also known as 
the functions, procedures or methods, in the 
programming language.

Features:
*Inheritance
*Data Abstraction
*Encapsulation
*Polymorphism

*Encapsulation: all the necessary data and methods
 are bind together and all the unnecessary details
 are hidden to the normal user. So Encapsulation 
 is the process of binding data members and methods
 of a program together to do a specific job, 
 without revealing unnecessary details.

Encapsulation can also be defined in two different ways:
1) Data hiding
2) Data binding

*Polymorphism: Polymorphism is composed of two 
words - “poly” which means “many”, and “morph” 
which means “shapes”. Polymorphism refers to the 
process by which some code, data, method, or 
object behaves differently under different 
circumstances or contexts.

*Inheritance: inheritance is the mechanism by 
which an object or class (referred to as a child)
is created using the definition of another object
or class (referred to as a parent).

The various types of inheritance include:
-Single inheritance
-Multiple inheritances
-Multi-level inheritance

EXAMPLE:
class vehicle:
	cars
	bike
	van(can't use)
class cars(vehicle):
	sports car
	van 	
class van(cars):

*Abstraction: Abstraction is the method of hiding 
unnecessary details from the necessary ones. It 
is one of the main features of OOPs. You only need
to know how to run a car, and not how the wires 
are connected inside it. This is obtained using 
Abstraction.

NOTE: Data abstraction and encapsulation are 
synonymous as data abstraction is achieved 
through encapsulation. Abstraction is used to 
hide internal details and show only 
functionalities.

*Constructor: Constructors are special methods 
whose name is the same as the class name. The 
constructors serve the special purpose of 
initializing the objects.

For example, suppose there is a class with the 
name “MyClass”, then when you instantiate this 
Class, you pass the syntax:

MyClass myClassObject = new MyClass();

Now here, the method called after “new” keyword -
MyClass(), is the constructor of this class.

*Destructor: It is used to delete the created 
object. destructors free up the resources and 
memory occupied by an object.

*Subclass: The subclass is a part of Inheritance.
The subclass is an entity, which inherits from 
another class. It is also known as the child class.

*Superclass: Superclass is also a part of 
Inheritance. The superclass is an entity, which 
allows subclasses or child classes to inherit 
from itself.

*Abstract class: An abstract class is a special
 class containing abstract methods.
